const fs = require("fs");
const { sendAdminNotification } = require("../utils/notifier");

const caseOptions = {
  serdce: { name: "–°–µ—Ä–¥—Ü–µ", cost: 7, winRate: 0.15, prize: "üíù –°–µ—Ä–¥—Ü–µ" },
  medved: { name: "–ú–µ–¥–≤–µ–¥—å", cost: 7, winRate: 0.15, prize: "üß∏ –ú–µ–¥–≤–µ–¥—å" },
  podarok: { name: "–ü–æ–¥–∞—Ä–æ–∫", cost: 12, winRate: 0.15, prize: "üéÅ –ü–æ–¥–∞—Ä–æ–∫" },
  roza: { name: "–†–æ–∑–∞", cost: 12, winRate: 0.15, prize: "üåπ –†–æ–∑–∞" },
  tort: { name: "–¢–æ—Ä—Ç", cost: 25, winRate: 0.15, prize: "üéÇ –¢–æ—Ä—Ç" },
  buquet: { name: "–ë—É–∫–µ—Ç", cost: 25, winRate: 0.15, prize: "üíê –ë—É–∫–µ—Ç" },
  butylka: { name: "–ë—É—Ç—ã–ª–∫–∞", cost: 25, winRate: 0.15, prize: "üçæ –ë—É—Ç—ã–ª–∫–∞" },
  raketa: { name: "–†–∞–∫–µ—Ç–∞", cost: 25, winRate: 0.15, prize: "üöÄ –†–∞–∫–µ—Ç–∞" },
  kubok: { name: "–ö—É–±–æ–∫", cost: 50, winRate: 0.15, prize: "üèÜ –ö—É–±–æ–∫" },
  kolco: { name: "–ö–æ–ª—å—Ü–æ", cost: 50, winRate: 0.15, prize: "üíç –ö–æ–ª—å—Ü–æ" },
  almaz: { name: "–ê–ª–º–∞–∑", cost: 50, winRate: 0.15, prize: "üíé –ê–ª–º–∞–∑" },
  lollipopNFT: {
    name: "–õ–µ–¥–µ–Ω–µ—Ü NFT",
    cost: 10,
    winRate: 0.01,
    prize: "üç≠ –õ–µ–¥–µ–Ω–µ—Ü NFT",
  },
};

function loadUsers() {
  const data = fs.readFileSync("./data/users.json", "utf8");
  return JSON.parse(data);
}

function saveUsers(users) {
  fs.writeFileSync("./data/users.json", JSON.stringify(users, null, 2), "utf8");
}

function handleCaseCommand(ctx) {
  const users = loadUsers();
  const user = users[ctx.from.id];
  const caseId = ctx.match[1];
  const selected = caseOptions[caseId];

  if (!selected) return ctx.reply("–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞:", user);

  const userStars = Number(user.stars);
  const caseCost = Number(selected.cost);

  if (userStars < caseCost) {
    console.log(
      `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${userStars}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ —Å —Ü–µ–Ω–æ–π (${caseCost})`
    );
    return ctx.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥.");
  }

  ctx.reply(
    `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å "${selected.name}"? –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: ${
      user.rigged
        ? "100%"
        : caseId === "lollipopNFT"
        ? `${selected.winRate * 100}%`
        : "45%"
    }`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–û–ø–ª–∞—Ç–∏—Ç—å ${selected.cost}‚≠êÔ∏è`,
              callback_data: `open_${caseId}`,
            },
          ],
        ],
      },
    }
  );
}

function handleCaseOpening(ctx) {
  const users = loadUsers();
  const user = users[ctx.from.id];
  const caseId = ctx.match[1];
  const selected = caseOptions[caseId];

  console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫–µ–π—Å–∞:", user);

  const userStars = Number(user.stars);
  const caseCost = Number(selected.cost);

  if (userStars < caseCost) {
    console.log(
      `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${userStars}) –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ —Å —Ü–µ–Ω–æ–π (${caseCost})`
    );
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞.");
  }

  user.stars -= caseCost;

  console.log("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:", user.stars);

  const win = user.rigged || Math.random() <= selected.winRate;

  if (win) {
    ctx.reply(
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${selected.prize} \n –û—Ç–ø–∏—à–∏—Ç–µ @GiftBag_Priz –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞`
    );
    sendAdminNotification(user, selected.prize);
  } else {
    ctx.reply("üò¢ –£–≤—ã, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.");
  }

  user.rigged = false;

  saveUsers(users);

  console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", users);
}

module.exports = { handleCaseCommand, handleCaseOpening };
