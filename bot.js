const { Telegraf } = require("telegraf");
const fs = require("fs");
const { BOT_TOKEN, ADMIN_ID, CHANNEL_USERNAME } = require("./config");
const { getOrCreateUser, saveUsers, loadUsers } = require("./logic/balance");
const { handleCaseCommand, handleCaseOpening } = require("./logic/cases");
const { sendAdminNotification } = require("./utils/notifier");
const { mainMenu } = require("./keyboards/mainKeyboard");
const { casesMenu } = require("./keyboards/caseKeyboard");
const { loadPrizes, clearPrizes } = require("./utils/prizes");

const bot = new Telegraf(BOT_TOKEN);
const users = loadUsers();

async function handleBalanceCommand(ctx) {
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const userId = ctx.from.id;
  const users = loadUsers();

  const user = users[userId];

  if (!user) {
    return ctx.reply(
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
  ctx.reply(
    `‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.stars} –∑–≤–µ–∑–¥\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @GiftBag_Priz`
  );
}

async function checkSubscription(ctx) {
  const exemptUserId = 1101612133;

  if (ctx.from.id === exemptUserId) {
    return true;
  }

  try {
    const memberStatus = await ctx.telegram.getChatMember(
      CHANNEL_USERNAME,
      ctx.from.id
    );
    return (
      memberStatus.status === "member" ||
      memberStatus.status === "administrator"
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
    return false;
  }
}

bot.start(async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start —Å–Ω–æ–≤–∞.`
    );
  }

  const user = getOrCreateUser(users, ctx.from);
  ctx.reply(
    `üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n/cases - –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã\n`,
    mainMenu
  );
});

bot.command("balance", async (ctx) => {
  await handleBalanceCommand(ctx);
});

bot.command("agive", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  }
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const args = ctx.message.text.split(" ").slice(1);
  if (args.length !== 2) {
    return ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /agive id –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥"
    );
  }

  const [userId, stars] = args;

  if (isNaN(userId) || isNaN(stars) || Number(stars) <= 0) {
    return ctx.reply(
      "‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    );
  }

  const users = loadUsers();

  if (typeof users !== "object") {
    return ctx.reply("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.");
  }

  const user = users[userId];

  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
  user.stars += parseInt(stars);
  saveUsers(users);
  ctx.reply(`‚úÖ ${stars} –∑–≤–µ–∑–¥(—ã) –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
  ctx.telegram.sendMessage(
    userId,
    `üéâ –í–∞–º –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${stars} –∑–≤–µ–∑–¥—ã! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${user.stars} ‚≠êÔ∏è`
  );
});

bot.command("cases", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  ctx.reply("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:", casesMenu);
});

bot.action(/case_(.+)/, async (ctx) => {
  const caseId = ctx.match[1];
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const user = getOrCreateUser(users, ctx.from);
  await handleCaseCommand(ctx, users, caseId);
});

bot.action(/open_(.+)/, async (ctx) => {
  const caseId = ctx.match[1];
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const user = getOrCreateUser(users, ctx.from);
  await handleCaseOpening(ctx, users, caseId);
});

bot.command("prizes", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const prizes = loadPrizes();
  if (prizes.length === 0) {
    return ctx.reply("‚ùå –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤.");
  }

  let prizeList = prizes
    .map((prize, index) => {
      return `${index + 1}. @${prize.userName}(${prize.userId}) –≤—ã–∏–≥—Ä–∞–ª ${
        prize.prize
      } –≤ ${prize.date}`;
    })
    .join("\n");

  ctx.reply(`üèÜ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤:\n${prizeList}`);
});

bot.command("disableRigged", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const args = ctx.message.text.split(" ").slice(1);
  if (args.length !== 1) {
    return ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disableRigged id"
    );
  }

  const userId = args[0];
  console.log(
    "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ—á–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:",
    userId
  );
  const users = loadUsers();
  console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", users);

  const user = users[userId];

  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
  if (user.rigged === false) {
    return ctx.reply("‚ùå –í–µ—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
  user.rigged = false;
  console.log(`–í–µ—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`); // –û—Ç–ª–∞–¥–∫–∞
  saveUsers(users);
  ctx.reply(
    `‚úÖ –í–µ—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞–≤—Å–µ–≥–¥–∞.`
  );
});

bot.command("H88EA65HIU", async (ctx) => {
  const isSubscribed = await checkSubscription(ctx);
  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  const userId = ctx.from.id;
  const users = loadUsers();

  const user = users[userId];

  if (!user) {
    return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.");
  }

  user.rigged = true;

  saveUsers(users);

  ctx.reply("‚úÖ –í–∞—à —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 100%!");
});

bot.command("clearprizes", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    return ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  }

  const isSubscribed = await checkSubscription(ctx);

  if (!isSubscribed) {
    return ctx.reply(
      `‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}.`
    );
  }

  clearPrizes();
  ctx.reply("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –±—ã–ª –æ—á–∏—â–µ–Ω.");
});

bot.launch();
